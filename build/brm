#! /bin/bash
TESTS=()
function verify_expectations() {
	local actual=$1
	local expected=$2
	local test_result="fail"
	if [[ "$expected" == "$actual" ]]
	then
		test_result="pass"
	fi
	echo $test_result
}
function append_test_case() {
	local test_result=$1
	local data=$2
	
	TESTS[${#TESTS[@]}]="$test_result|${data}"	
}
function get_tests() {
	local test
	
	for test in "${TESTS[@]}"
	do
		echo "$test"
	done
}
SEPARATOR=$( seq -f"-" -s"\0" 20 )
BOLD="\033[1m"
NORMAL="\033[0m"
function display_failed_tests() {
	local failed_tests=("${@}")
	
	echo -e "\n${BOLD}FAILED TEST CASES${NORMAL}"
	local heading test
	for test in "${failed_tests[@]}"
	do
		if [[ $heading != $(echo "$test" | cut -f2 -d"|" ) ]]; then
			heading=$(echo "$test" | cut -f2 -d"|" )
			echo -e "\n${BOLD}$heading${NORMAL}"
		fi
		
		echo -e "\t$( echo "$test" | cut -f3 -d"|")"
		echo -e "\t\tInputs : $( echo "$test" | cut -f4 -d"|")"
		echo -e "\t\tExpected : $( echo "$test" | cut -f5 -d"|")"
		echo -e "\t\tActual : $( echo "$test" | cut -f6 -d"|")"
	done	
}
function display_test_results() {
	local tests=("$@")
	
	local failed_tests=()
	local test heading test_result
	for test in "${tests[@]}"
	do
		if [[ $heading != $(echo "$test" | cut -f2 -d"|" ) ]]; then
			heading=$(echo "$test" | cut -f2 -d"|" )
			echo -e "\n${BOLD}$heading${NORMAL}"
		fi
		echo -en "\t"
		test_result="\033[0;32m✔\033[0m"
		if [[ $( echo "$test" | cut -f1 -d"|" ) == "fail" ]]; then
			test_result="\033[0;31m✗\033[0m"
			failed_tests[${#failed_tests[@]}]="$test"
		fi
		echo -ne "${test_result} "
		echo "${test}" | cut -f3 -d"|"
	done
	echo $SEPARATOR
	echo "FAILED : ${#failed_tests[@]}/${#tests[@]}"
	echo $SEPARATOR
	[[ ${#failed_tests[@]} -le 0 ]] && return 0
	display_failed_tests "${failed_tests[@]}"
}
function generate_report() {
	local tests=("$@")
	clear
	echo "Test Report : "
	display_test_results "${tests[@]}"
}
function is_source() {
  local inst=$1
  grep -q "^source " <<< ${inst}
}
function get_sourced_file() {
  local source_inst=$1
  cut -f2 -d" " <<< $source_inst
}
function get_file_dir() {
  local file_path=$1
  local file_dir="."
  if grep -q ".*/" <<< ${file_path} ; then
    file_dir="${file_path%/*}"
  fi
  
  echo "${file_dir}"
}
function search_element() {
	local searching_element=$1
	local array=("${@:2}")
	local element_index=0
	local array_ele
	for array_ele in "${array[@]}"
	do
		if grep -q "$searching_element" <<< $array_ele ; then
			echo $element_index
			return 0
		fi
		element_index=$(( $element_index + 1 ))
	done
	echo -1
	return 4
}
function get_filename() {
  local file=$1
  echo "${file##*/}"
}
BINDED_FILES=()
function is_file_binded() {
  local file=$1
  local binded_files=("${@:2}")
  local index=$( search_element "${file}" "${binded_files[@]}" )
  if [[ $index -lt 0 ]]; then
    return 1
  fi
  diff ${binded_files[$index]} $file
}
function bind() {
  local file=$1
  
  if [[ ! -f "${file}" ]]; then
    echo "Error : \"$file\" not found" > /dev/stderr
    exit 4
  elif is_file_binded "${file}" "${BINDED_FILES[@]}"; then
    return 0
  fi
  local file_dir_path=$( get_file_dir "${file}" )
  local content=$( cat "${file}" )
  
  OLDIFS=$IFS
  IFS=$'\n'
  local line
  for line in ${content}
  do
    IFS=$OLDIFS
    if is_source "${line}"; then
      local source_file="$( get_sourced_file "${line}" )"
      local resolved_path="${file_dir_path}/${source_file}"
      bind "${resolved_path}"
      continue
    fi
    echo "${line}"
  done
  IFS=$OLDIFS
  BINDED_FILES[${#BINDED_FILES[@]}]=${file}
}
function run() {
  local file=$1
  if [[ ! -f "${file}" ]]; then
    echo "Error : \"$file\" not found" > /dev/stderr
    exit 4
  fi
  echo "Binding files"
  local temp_dir=$( mktemp -d )
  local filename=$( get_filename "${file}" )
  local binded_file="${temp_dir}/${filename}"
  bind "${file}" 1> "${binded_file}"
 
  echo -e "Running script\n\n"
  chmod +x "${binded_file}"
  "${binded_file}" "${@:2}"
}
TEST_DATA="tests/data"
function test_is_file_binded() {
  local test_description=$1
  local expected=$2
  local file=$3
  local binded_files=("${@:4}")
  local actual
  is_file_binded $file "${binded_files[@]}"
  actual=$?
  local test_result=$( verify_expectations "$actual" "$expected" )
  local inputs="File : $file, Binded Files : ${binded_files[*]}"
  append_test_case $test_result "is_file_binded|$test_description|$inputs|$expected|$actual"
}
function test_cases_is_file_binded() {
  local test_description="should verify if file already binded"
  local expected=0
  local file="${TEST_DATA}/samples/source.sh"
  local binded_files=("lib/helpers.sh" "${TEST_DATA}/samples/source.sh")
  test_is_file_binded "$test_description" "$expected" "$file" "${binded_files[@]}"
  test_description="should verify if file is not binded"
  expected=1
  file="builde.sh"
  binded_files=("lib/helpers.sh" "${TEST_DATA}/samples/source.sh")
  test_is_file_binded "$test_description" "$expected" "$file" "${binded_files[@]}"
}
function test_bind() {
  local test_description=$1
  local expected=$2
  local expected_file=$3
  local entry_file=$4
  $( bind $entry_file &> "${TEST_DATA}/bind/actual" )
  local actual_file="${TEST_DATA}/bind/actual"
  local actual
  diff ${expected_file} ${actual_file} &> /dev/null
  actual=$?
    
  local test_result=$( verify_expectations "$actual" "$expected" )
  local inputs="Entry File : $entry_file"
  append_test_case $test_result "bind|$test_description|$inputs|$expected|$actual"
}
function test_cases_bind() {
  local test_description="should bind sourced files"
  local expected=0
  local expected_file="${TEST_DATA}/bind/expected"
  local entry_file="${TEST_DATA}/samples/source.sh"
  test_bind "$test_description" "$expected" "${expected_file}" "$entry_file"
  test_description="should give error if any source file not found"
  expected=0
  expected_file="${TEST_DATA}/bind/expected_error"
  entry_file="${TEST_DATA}/samples/sourc.sh"
  test_bind "$test_description" "$expected" "${expected_file}" "$entry_file"
}
function test_run() {
  local test_description=$1
  local expected=$2
  local expected_file=$3
  local entry_file=$4
  $( run $entry_file &> "${TEST_DATA}/run/actual" )
  local actual_file="${TEST_DATA}/run/actual"
  local actual
  diff ${expected_file} ${actual_file} &> /dev/null
  actual=$?
    
  local test_result=$( verify_expectations "$actual" "$expected" )
  local inputs="Entry File : $entry_file"
  append_test_case $test_result "run|$test_description|$inputs|$expected|$actual"
}
function test_cases_run() {
  local test_description="should run the scripts"
  local expected=0
  local expected_file="${TEST_DATA}/run/expected"
  local entry_file="${TEST_DATA}/samples/run_sample.sh"
  test_run "$test_description" "$expected" "${expected_file}" "$entry_file"
  test_description="should give error if entry file doesn't exist"
  expected=0
  expected_file="${TEST_DATA}/run/expected_error"
  entry_file="${TEST_DATA}/samples/run_sampl.sh"
  test_run "$test_description" "$expected" "${expected_file}" "$entry_file"
  test_description="should give error if any of the source file is missing"
  expected=0
  expected_file="${TEST_DATA}/run/expected_error2"
  entry_file="${TEST_DATA}/samples/run_sample_error.sh"
  test_run "$test_description" "$expected" "${expected_file}" "$entry_file"
}
function is_source() {
  local inst=$1
  grep -q "^source " <<< ${inst}
}
function get_sourced_file() {
  local source_inst=$1
  cut -f2 -d" " <<< $source_inst
}
function get_file_dir() {
  local file_path=$1
  local file_dir="."
  if grep -q ".*/" <<< ${file_path} ; then
    file_dir="${file_path%/*}"
  fi
  
  echo "${file_dir}"
}
function search_element() {
	local searching_element=$1
	local array=("${@:2}")
	local element_index=0
	local array_ele
	for array_ele in "${array[@]}"
	do
		if grep -q "$searching_element" <<< $array_ele ; then
			echo $element_index
			return 0
		fi
		element_index=$(( $element_index + 1 ))
	done
	echo -1
	return 4
}
function get_filename() {
  local file=$1
  echo "${file##*/}"
}
function test_is_source() {
    local test_description=$1
    local expected=$2
    local inst=$3
    local actual
    is_source "${inst}"
    actual=$?
    local test_result=$( verify_expectations "$actual" "$expected" )
    local inputs="Instruction : $inst"
    append_test_case $test_result "is_source|$test_description|$inputs|$expected|$actual"
}
function test_cases_is_source() {
    local test_description="should check if instruction is a source instruction"
    local expected=0
    local inst="source file.sh"
    test_is_source "$test_description" "$expected" "$inst"
}
function test_get_sourced_file() {
    local test_description=$1
    local expected=$2
    local inst=$3
    local actual=$( get_sourced_file "${inst}" )
    local test_result=$( verify_expectations "$actual" "$expected" )
    local inputs="Instruction : $inst"
    append_test_case $test_result "get_sourced_file|$test_description|$inputs|$expected|$actual"
}
function test_cases_get_sourced_file() {
    local test_description="should give sourced file name"
    local expected="file.sh"
    local inst="source file.sh"
    test_get_sourced_file "$test_description" "$expected" "$inst"
}
function test_get_file_dir() {
    local test_description=$1
    local expected=$2
    local file=$3
    local actual=$( get_file_dir ${file} )
    local test_result=$( verify_expectations "$actual" "$expected" )
    local inputs="Instruction : $file"
    append_test_case $test_result "get_file_dir|$test_description|$inputs|$expected|$actual"
}
function test_cases_get_file_dir() {
    local test_description="should give file directory"
    local expected="dir/dir2"
    local file="dir/dir2/file.sh"
    test_get_file_dir "$test_description" "$expected" "$file"
}
function test_get_filename() {
    local test_description=$1
    local expected=$2
    local file=$3
    local actual=$( get_filename ${file} )
    local test_result=$( verify_expectations "$actual" "$expected" )
    local inputs="File : $file"
    append_test_case $test_result "get_filename|$test_description|$inputs|$expected|$actual"
}
function test_cases_get_filename() {
    local test_description="should give the file name from give file path"
    local expected="source.sh"
    local file="dir/dir2/source.sh"
    test_get_filename "$test_description" "$expected" "$file"
}
function run_all_tests() {
  local test_dir="tests"
  local test_files=()
  test_files[0]="${test_dir}/test_library.sh"
  test_files[1]="${test_dir}/test_helpers.sh"
  local test_cases=($(get_test_cases "${test_files[@]}"))
  OLDIFS=${IFS}
	IFS=$'\n'
  for test_case in ${test_cases[@]}
  do
    IFS=${OLDIFS}
    ${test_case}
  done
  IFS=${OLDIFS}
}
function run_tests() {
	run_all_tests
	
	OLDIFS=${IFS}
	IFS=$'\n'
	local tests=($(get_tests))
	IFS=${OLDIFS}
	
	generate_report "${tests[@]}"
}
run_tests
